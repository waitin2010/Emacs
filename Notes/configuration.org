* materials: Hour 22,23,24 from 'Sams Teach Yourself Emacs in 24 Hours'
* Learning Lisp Basics
  The focus in this hour is on customizing Emacs using your .emacs file, not on
topics specific to writing larger extensions. This hour teaches you enough about
Lisp to understand and edit you .emacs file.
** The purpose of Lisp
   Easy configure and support enough power to do whatever you want.
** Values in Lisp
   - Booleans :: In many situations there are two possible values for a given configureation option.
		 The value true is in Lisp represented using the character t, and false is represented using nil.
   - Numbers :: Examples of the use of numbers include the number of backups to keep, the number of character to indent when programming C and so on.
   - String :: Strings are used in Emacs in many different situations. Most of these situations are when programming Lisp.
	       String are represented by placing quotation marks around the string.
   - Symbols :: In Emacs, a data called symbols exists which can be viewed as another way of writing a string.
		Symbols are written by putting a single quotation mark in front of the name as in 'do-backup
   - Lists :: Lists are specified by listing each of the elements within a pair of parentheses, the outermost list must be prefixed with a quote.
   - Association Lists(alist) :: An association list is a map from a key to a value.
** Operation on Lists
   Whether your new element should be added to the front of the list or the end of the list depends on what your intentions are.
   - inserting in the front of a list :: take precedence over the others
   - Inserting at the end of a list. :: the others have precedence over new element.
   | Intention        | Set Global value     | Set local value     |
   |------------------+----------------------+---------------------|
   | not buffer-local | setq or setq-default | make-local-variable |
   | buffer-local     | setq-default         | setq                |
** configure Options for a single file
   Some configurations might be local to a given file rather than a given major mode.
   This can be obtained by inserting a few line at the bottom of the give file.
   /* Local Variables: */
   /* variable1: value1 */
   /* variable2: value2 */
   /* End: */

** Function Definitions
   A function is a collection of commands that is given a name. When the function is executed, each command is executed in turn.
   Anonymous functions are defined with the keyword lambda which has no function name to reference.
   


   
** Organization of your configurations
   One example from the book.
   - emacs-std.el :: This file is for the standard Emacs options.
   - bindings.el :: This file includes the keybindings for your Emacs setup.
   - macros.el :: This file can contain all the macros you have developed.
   - modes.el :: This file can contain configurations for the different major modes that you use, such as c-mode, html-mode, and text-mode
   - extensions.el :: This file can contain configurations for the different extensions you use.
   (setq load-path
      (cons "~/Emacs/Configurations"
          (cons "~/Emacs/Extensions" load-path)))
   (load "emacts-std")
   (load "bindings")
   (load "macros")
   (load "modes")
   (load "extensions")

** Byte-Compiling Files
   Emacs can byte-compile your lisp files, which makes them run faster.
   byte-compile-file or byte-recompile-directory.

* Binding Keys and creating menus
** keyboard modifiers
   - meta-modifier :: generated by Esc key and Alt key
   - Alt-modifier :: generated by the Alt key
   - control-modifier :: generated by the Ctrl key
   - Shift-modifier :: generated by the Shift key
   - Hyper-modifier :: exists on some keyboards
   - Super-modifier :: exists on some keyboards
** Keyboard and Events
   In addition to your modifier and character keys, there are function keys,
the keypad set, and possibly other keys o nthe keyboard.
   These keys don't generate characters, but named events.
** Mouse and Events
   You can best work with Emacs if you own a three-button mouse which named from left to right: mouse-1, mouse-2, mouse-3.
** Key Sequences and Keymaps
   A key sequence is the input packet that Emacs interprets as a whole.
   The key sequence is associated to some action through keymap.
   A keymap in Emacs is stored in a Lisp variable, which is traditionally named so that 
it ends in the suffix-keymap.
   The most basic predefined keymaps in Emacs are the following: 
   - global-map :: contains key definitions that are available everywhere in Emacs.
   - esc-map :: part of global-map and handles all key sequence that are started with Esc key.
   - mode-specific-map	 :: part of global-map and handles all the key sequences started with the C-c key which is for extension package and for user keybindings
   - ctl-x-map :: the keymap under which C-x-derived key sequences are interpreted. This keymap is the heart of the emacs.
		  includes two more submaps: ctl-x-4-map and ctl-x-5-map
*** Prefix Key Accesses Submap
    A key sequence that leads to the submap-such as C-x, C-c, C-x 4, C-x 5- is called prefix key.
    There are several defined prefix keys that lead to further submaps, which is indicated by the wording Prefix command.
    From here you can query the defined keys in a particular keymap with the key sequence <Prefix-key> followed by c-h.
    eg, C-x C-h for ctl-map

*** prefix argument
    A prefix argument carries extra information to the command behind key sequence.
    The keys C-u (universal-argument) and Esc followed by a numeric value have  been assigned to be
used for a prefix argument.
    It is also possible to pass negative prefix arguments to commands.

*** Major Modes and Keymaps
    Submode can define its own keymap and overrides the global-map with it.
    Only one mojor mode can be active at the time.
    Each major mode keymap is named by using the mode's name and adding a suffix-keymap to it.
*** Major mode hook and mode keymaps
    The major mode's keymap does not exit until the major mode has been loaded and it has defined and
initialized the keymap.
    When major mode turns on, it initializes itself and runs a mode-hook for user customizations.
*** Minor modes and keymaps
    There can be only one major mode active in a buffer, but it is possible to have any number of accompanying minor modes running parallel to major mode.
    Minor modes can have keymaps that override the major mode's keymap.
*** Minor Mode hook and mode keymap.
    Minor modes doesn't all have the minor-hook.
*** Clearing Keybinding in keymaps
    (define-key keymap key nil)
*** Creating Custom Keymaps in Global-Map
    (global-set-key key function)
*** Know your environment
    Before you leap into defining custom keybindings, you have to find out what kind of key sequence Emacs thinks you pressed.
*** Finding the key sequence Syntax
    The most convenient way to find out the key sequence syntax isto press the keys and recall the input with command C-h l (view-lossage).
*** Recording and Running a Macro with Easier Keybindings 
    One of the handiest features in Emacs is the capability to record keyboard activities and play them back later.
    The macros are suitable for ad hoc tasks where you have a repeated editing task in the buffer.
** making Personal Keybindings
   (global-set-key key function)
* Installing Emacs Add-Ons
  Emacs was defigned to be extended by its users, and extend it they have.
** Simple and complex Add-ons
   All Emacs add-ons are text files that are written in the lisp programming language, but extensive Lisp knowledge isn't necessary for you to
use and customize them.
   A simple add-ons have instructions for loading and customizing the file or files in the head of the add-on file.
   A complex add-ons often has a README or INSTALL file included, which contains the necessary information.
** Location and Paths
   When Emacs is first installed an empty directory(site-lisp) is created just for add-on modes.
   (setq load-path (cons directory load-path))
   or (setq load-path (append load-path (list directory)))

** Loading Techniques
   - autoload :: the most common method of activatin an add-on mode.
   - load-library :: loads a lisp file
   - require :: loads a file only if it hasn't already been loaded.
   - provide :: make a specific feature in a lisp file available.

** Filenames and Interpreters
   Many modes are designed to work with files that normally have a particular filename suffix.
   (setq auto-mode-alist (cons '(suffix . mode) auto-mode-alist))
** Hooks 
   Hooks are often provided for add-on Lisp files. 
   Hooks are aptly named-they are functions that an Emacs process can "hook" into in order for a user to change the default behavior.
   Hook statements are often used to change the keybindings of a mode, most of
which have predefined keymaps.








